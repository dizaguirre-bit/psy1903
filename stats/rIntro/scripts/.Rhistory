if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
all.data <- learning
rm("learning")
head(all.data)
str(all.data)
all.data$X <- NULL
head(all.data)
View(all.data)
class(all.data$race)
str(all.data$race)
class(all.data)
rm(all.data)
alldata.kidlearning1 <- read.csv("~/Downloads/PSY 1901 Lab/alldata.kidlearning1.csv")
View(alldata.kidlearning1)
all.data <- alldata.kidlearning1
rm(all.da)
rm("alldata.kidlearning1"")
rm("alldata.kidlearning1")
rm("alldata.kidlearning1")
all.data$X <- NULL
head(all.data)
class(all.data$race)
str(all.data$race)
View(all.data)
class(all.data$race)
str(all.data$race)
all.data$race <- as.factor(all.data$race)
class(all.data$race)
str(all.data$race)
class(all.data$condition)
all.data$condition <- as.factor(all.data$condition)
class(all.data$condition)
table(all.data$race)
all.data$race.simple <- recode(all.data$race, "'A' = 'nonW'; 'B' = 'nonW'; 'O' = 'nonW'")
table(all.data$race.simple)
if (!require(rstudioapi)) {install.packages("rstudioapi"); require(rstudioapi)}
if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
all.data$race.simple <- recode(all.data$race, "'A' = 'nonW'; 'B' = 'nonW'; 'O' = 'nonW'") # from car package
table(all.data$race.simple)
all.data$race.simple <- relevel(all.data$race.simple, "W")
table(all.data$race.simple)
table(all.data$site)
table(all.data$condition)
mean(all.data$age)
mean(all.data$d.corrected)
summary(all.data)
summary(all.data$age)\
summary(all.data$age)
?pwr.r.test
pwr.r.test(n = dim(all.data)[1], r = .2, sig.level = .05)
pwr.r.test(r = .2, power = .80, sig.level = .05)
t.test(d.corrected ~ race.simple, data = all.data)
cohensD(d.corrected ~ race.simple, data = all.data)
t.test(d.corrected ~ site, data = all.data)
cohensD(d.corrected ~ site, data = all.data)
anova.lm <- lm(d.corrected ~ condition, data = all.data)
anova(anova.lm)
anova.aov <- aov(d.corrected ~ condition, data = all.data)
summary(anova.aov)
TukeyHSD(anova.aov)
etaSquared(anova.aov)
cor.test(all.data$age, all.data$d.corrected)
plot(all.data$age, all.data$d.corrected, ylab = "D score", xlab = "Age")
abline(lm(all.data$d.corrected ~ all.data$age), col = "coral", lwd = 4)
cor(intercor, use = "complete.obs")
intercor <- all.data[c("age", "d.corrected", "explicit.combined")]
cor(intercor, use = "complete.obs")
rm(list=ls())
library(readxl)
psy1901 <- read_excel("Downloads/PSY 1901 Group Project_April 10, 2024_11.56.xlsx")
View(psy1901)
psy1901 <- psy1901[psy1901$Consent == "Yes"]
psy1901 <- subset(psy1901, Consent="Yes")
psy1901 <- subset(psy1901, Consent !="NA")
psy1901 <- subset(psy1901, MC1 != "It was not specified")
psy 1901 <- subset (psy1901, MC3 != "It was not mentioned")
psy1901 <- subset (psy1901, MC3 != "It was not mentioned")
table(psy1901$MC1)
table(psy1901$Gender...22)
library(readxl)
dataset <- read_excel("Downloads/PSY 1901 Group Project_April 10, 2024_11.56.xlsx")
View(dataset)
table(dataset$Gender...22)
dataset <- subset(dataset, Consent !="NA")
dataset <- subset(dataset, Consent !="No")
dataset <- subset(dataset, MC1 = != "It was not specified")
dataset <- subset(dataset, MC1 != "It was not specified")
rm("dataset")
library(readxl)
dataset <- read_excel("Downloads/PSY 1901 Group Project_April 10, 2024_11.56.xlsx")
View(dataset)
dataset <- subset(dataset, Consent !="No")
dataset <- subset(dataset, Consent !="NA")
table(dataset$MC1)
?c
rm(dataset)
psy1901 <- psy1901[c(-1, )]
psy1901 <- psy1901[c(-1,)]
psy1901 <- psy1901[-c(1,2), ]
rm(list=ls())
library(readxl)
PSY_1901_Group_Project_April_12_2024_04_40 <- read_excel("Downloads/PSY 1901 Group Project_April 12, 2024_04.40.xlsx")
View(PSY_1901_Group_Project_April_12_2024_04_40)
table(PSY_1901_Group_Project_April_12_2024_04_40$Gender...20)
rm(list=ls())
library(readxl)
Project100 <- read_excel("Downloads/PSY 1901 Group Project_April 12, 2024_04.40.xlsx")
View(Project100)
Project100<-subset(Project, Progress == "100.0" | Progress == "98.0")
Project100<-subset(Project, Progress == "100.0" | Progress == "98.0")
Project100<-subset(Project100, Progress == "100.0" | Progress == "98.0")
Project100c<-subset(Project100, Consent == "Yes")
Project100cm<-subset(Project100c, MC1 == "Men" | MC1 == "Women" | MC1 == "Both genders equally")
Project100cm3<-subset(Project100cm, MC3 == "Men were superior" | MC3 == "Women were superior" | MC3 == "Both genders were equally capable")
Project100cm3 <- Project100cm3[-c(1,2,3,4), ]
View(Project100cm3)
rm(list=ls())
library(readxl)
Project100 <- read_excel("Downloads/PSY 1901 Group Project_April 12, 2024_04.40.xlsx")
View(Project100)
Project100 <-subset(Project100, Progress == "100.0" | Progress == "98.0")
Project100c<-subset(Project100, Consent == "Yes")
Project100cm<-subset(Project100c, MC1 == "Men" | MC1 == "Women" | MC1 == "Both genders equally")
Project100cm3<-subset(Project100cm, MC3 == "Men were superior" | MC3 == "Women were superior" | MC3 == "Both genders were equally capable")
View(Project100cm3)
p <- Project100cm3[-c(1,2), ]
View(p)
rm(list=ls()
rm(list=ls())
rm(list=ls())
library(readxl)
Project <- read_excel("Downloads/PSY 1901 Group Project_April 12, 2024_04.40.xlsx")
View(Project)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
install.packages(dplyr)
Project100<-subset(Project, Progress == "100.0" | Progress == "98.0")
Project100c<-subset(Project100, Consent == "Yes")
Project100cm<-subset(Project100c, MC1 == "Men" | MC1 == "Women" | MC1 == "Both genders equally")
Project100cm3<-subset(Project100cm, MC3 == "Men were superior" | MC3 == "Women were superior" | MC3 == "Both genders were equally capable")
#Everything below is my best approximation of translating from stata, some things may not be formated correctly or name the wrong thing. If you format to what data you have it should work.
Project = read_xlsx("data/PSY 1901 Group Project_April 12, 2024.xlsx")
Project100cm4<-subset(Project100cm3, Status == "IP Address")
summary(Project100cm4)
write_csv(Project100cm4, "1901_data.csv")
write.csv(Project100cm4, "1901_data.csv")
?write.csv
getwd()
data <- read.csv("1901_data.csv")
View(data)
correct_answers <- c("IM_9Nwr2XaDw7bJxVs", "IM_8izIw8Re02wEiay", "IM_1BmXmYOKPG9C9OS", "IM_3ds3D6bKljIkRHo", "IM_9ouLVbDjNHSD07s")
names(correct_answers) <- paste("Task", 1:5, "MCQ", sep="_")
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
correct_answers <- c("IM_9Nwr2XaDw7bJxVs", "IM_8izIw8Re02wEiay", "IM_1BmXmYOKPG9C9OS", "IM_3ds3D6bKljIkRHo", "IM_9ouLVbDjNHSD07s")
names(correct_answers) <- paste("Task", 1:5, "MCQ", sep="_")
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Fram`), "Female Negative", "Control"))
means <- data %>% group_by(Group) %>% summarise(across(contains("_Correct"), mean, .names = "mean_{.col}"))
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
Project <- read_excel("Downloads/PSY 1901 Group Project_April 12, 2024_04.40.xlsx")
View(Project)
Project100<-subset(Project, Progress == "100.0" | Progress == "98.0")
Project100c<-subset(Project100, Consent == "Yes")
Project100cm<-subset(Project100c, MC1 == "Men" | MC1 == "Women" | MC1 == "Both genders equally")
Project100cm3<-subset(Project100cm, MC3 == "Men were superior" | MC3 == "Women were superior" | MC3 == "Both genders were equally capable")
Project100cm4<-subset(Project100cm3, Status == "IP Address")
write_csv(Project100cm4, "1901_data.csv")
write.csv(Project100cm4, "1901_data.csv")
data <- read.csv("1901_data.csv")
correct_answers <- c("IM_9Nwr2XaDw7bJxVs", "IM_8izIw8Re02wEiay", "IM_1BmXmYOKPG9C9OS", "IM_3ds3D6bKljIkRHo", "IM_9ouLVbDjNHSD07s")
names(correct_answers) <- paste("Task", 1:5, "MCQ", sep="_")
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
view(task)
?view
task
correct_answers
correct_answers <- c("IM_9Nwr2XaDw7bJxVs", "IM_8izIw8Re02wEiay", "IM_1BmXmYOKPG9C9OS", "IM_3ds3D6bKljIkRHo", "IM_9ouLVbDjNHSD07s")
names(correct_answers) <- paste("Task", 1:5, "MCQ")
correct_answers
correct_answers <- c("IM_9Nwr2XaDw7bJxVs", "IM_8izIw8Re02wEiay", "IM_1BmXmYOKPG9C9OS", "IM_3ds3D6bKljIkRHo", "IM_9ouLVbDjNHSD07s")
names(correct_answers) <- paste("Task", 1:5, "MCQ", sep="")
correct_answers
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Fram`), "Female Negative", "Control"))
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
for (task in names(correct_answers)) {
data[[paste(task, "Correct", sep="_")]] <- ifelse(data[[task]] == correct_answers[task], 1, 0)
}
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Fram`), "Female Negative", "Control"))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Frame`), "Female Negative", "Control"))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Frame`), "Female Negative", "Control"))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame, "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative", "Control"))
View(data)
View(data)
ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative"), ifelse(grepl("Please click this when you finish reading treatment.", data$Control.Female.Frame), "Female Control", "Male Control"))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame, "Male Negative",
+                      ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative"), ifelse(grepl("Please click this when you finish reading treatment.", data$Control.Female.Frame), "Female Control", "Male Control"))
summary(data)
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame, "Male Negative",
+                      ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative"), ifelse(grepl("Please click this when you finish reading treatment.", data$Control.Female.Frame), "Female Control", "Male Control"))
summary(data)
col(data)
header(data)
head(data)
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Male Frame`), "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$`Negative Female Fram`), "Female Negative", "Control"))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame, "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative", "Control"))
head(data)
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame, "Male Negative",
ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Female.Fram), "Female Negative", "Control")))
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame,) "Male Negative"),
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame,) "Male Negative")
?grepl
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame), "Male Negative"),
data$Group <- ifelse(grepl("Please click this when you finish reading the statement.", data$Negative.Male.Frame), "Male Negative")
install.packages(c("ggplot2", "ggpubr", "tidyverse", "broom", "AICcmodavg"))
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(broom)
library(AICcmodavg)
rm(list=ls())
library(readxl)
dataset <- read_excel("Downloads/PSY 15 Final Project_November 24, 2024_20.17.xlsx")
View(dataset)
neutral <- na.omit(dataset$`Neutral Donate_1`)
neutral
fear <- na.omit(dataset$`Fear Donate_1`)
fear
?na.omit
pain <- na.omit(dataset$`Pain Donate_1`)
pain
mean(pain)
as.numeric(pain)
as.numeric(fear)
as.numeric(neutral)
pain <- na.omit(pain)
pain
neutral <- as.numeric(neutral)
fear <- as.numeric(fear)
pain <- as.numeric(pain)
pain <- na.omit(pain)
neutral <- na.omit (neutral)
fear <- na.omit (fear)
fear
mean(fear)
mean(neutral)
mean(pain)
dataset.list <- list(FearStimuli=fear, PainStimuli=pain, NeutralStimuli=neutral)
dataset.df <- stack(dataset.list)[, 2:1]
dataset.list
pain <- c(30, 40, 20, 5, 20, 15, 5, 26, 50, 0, 40, 0, 0, 30, 60, 45, 0, 15, 40, 0)
neutral <- c(36, 0, 19, 30, 81, 40, 30, 20, 5, 20, 1, 20, 50, 9, 8, 50, 50, 45, 10, 52, 50, 10)
fear <- c(14, 20, 30, 20, 0, 10, 80, 15, 30, 58, 20, 10, 15, 30, 50, 40, 60, 69, 10, 100, 10)
dataset.list <- list(PainDonate=pain, FearDonate=fear, NeutralDonate=neutral)
dataset.df <- stack(dataset.list)[, 2:1]
colnames(dataset.df) <- c("Stimuli", "Amount Donated")
str(dataset.df)
dataset.df
View(dataset.df)
summary(dataset.df)
aggregate(Amount Donated ~ Stimuli,
aggregate(Amount ~ Stimuli,
data = dataset.df,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(AmountDonated ~ Stimuli,
data = dataset.df,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(Amount Donated ~ Stimuli,
aggregate(Amount Donated ~ Stimuli, data = dataset.df, function(x) round(c(mean = mean(x), sd = sd(x)), 2))
summarise(dataset.df)
pain <- c(30, 40, 20, 5, 20, 15, 5, 26, 50, 0, 40, 0, 0, 30, 60, 45, 0, 15, 40, 0)
neutral <- c(36, 0, 19, 30, 81, 40, 30, 20, 5, 20, 1, 20, 50, 9, 8, 50, 50, 45, 10, 52, 50, 10)
fear <- c(14, 20, 30, 20, 0, 10, 80, 15, 30, 58, 20, 10, 15, 30, 50, 40, 60, 69, 10, 100, 10)
dataset.list <- list(PainDonate=pain, FearDonate=fear, NeutralDonate=neutral)
dataset.df <- stack(dataset.list)[, 2:1]
colnames(dataset.df) <- c("Stimuli", "AmountDonated")
str(dataset.df)
dataset_aov <- aov(AmountDonated ~ Stimuli, data = dataset.df)
summary(dataset_aov)
mean(fear)
mean(neutral)
mean(pain)
?sd
sd(fear)
sd(neutral)
sd(pain)
gender <- na.omit(dataset$Gender)
gender
summary(gender)
library(psych)
describe(gender)
gender == "Woman"
table(gender)
age <- na.omit(dataset$Age)
age
mean(age)
as.numeric(age)
age <- as.numeric(age)
age <- na.omit(age)
age
mean(age)
race <- na.omit(dataset$Race)
race
table(race)
age
table(dataset.df)
dataset.d
dataset.df
summary(dataset.df)
mean(pain)
mean(fear)
mean(neutral)
sd(neutral)
sd(fear)
sd(pain)
summary(dataset_aov)
rm ls = ()
rm
!rm
?rm
rm(ls = ())
rm(data, ls = ())
rm(list = ls())
version
install.packages("devtools")
updateR(admin_password = "Thanachin1234#")
install.packages("devtools")
version
2+2
rm(list=ls())
dir.create("stats/rIntro/output")
setwd("~/Desktop/psy1903")
## Create a new directory called "rIntro" for today's exercises:
dir.create("stats/rIntro")
#### (1) Setup initial directory structure -------------------------------------
## Start by setting your working directory to your psy1903 folder. Replace "~/Desktop/" with the correct path to your psy1903 directory:
setwd("~/Desktop/psy1903/")
## Create a new parent directory called "stats" where we will be doing all of our R work:
dir.create("stats/")
## Create a new directory called "rIntro" for today's exercises:
dir.create("stats/rIntro")
## Create new subdirectories "data", "scripts", & "output" for today's exercises:
dir.create("stats/rIntro/data")
dir.create("stats/rIntro/scripts")
dir.create("stats/rIntro/output")
## Set working directory to the rIntro/scripts parent directory, which will be our home base for today:
setwd("~/Desktop/psy1903/stats/rIntro/scripts")
## Save this script as R_introduction.R within your scripts directory (you can just use command+S or File → Save As)
install.packages("ggplot2")
library("ggplot2")
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot")
myVar <- 8  # This will create a variable called myVar and assign it a value of 8.
myVar + 2  # This will use the myVar variable and add 2, outputting 10
myVar <- myVar + 2  # This will overwrite the value of 8, and myVar will now be assigned 10 instead
mydata <- read.csv("~/Desktop/psy1903/stats/rIntro/data/data.csv")
View(mydata)
mydata <- read.csv("~/Desktop/psy1903/stats/rIntro/data/data.csv", header = TRUE, stringsAsFactors = FALSE, na.strings = c("NA", "?"))
View(mydata)
View(mydata)
head(mydata)      # View the first few rows
str(mydata)       # See the structure of the data frame
str(mydata)       # See the structure of the data frame
summary(mydata)   # Get a summary of each column
mydata$moodGroup <- as.factor(mydata$moodGroup)
str(mydata)
save.image(file = "workspace.RData")
x <- 3.14
typeof(x)
is.numeric(x)
int <- 5L        # Integer
typeof(int)      # Integer
class(int)       # Integer
is.numeric(int)  # TRUE
is.integer(int)  # TRUE
scores <- c(90, 85, NA, 88)
scores
mean(scores)
# [1] NA
sum(scores)
# [1] NA
x + missing  # adding 3.14 + NA
numeric_vector <- c(1.5, 2.3, 5.0)  # Numeric vector
character_vector <- c("apple", "banana", "cherry")  # Character vector
typeof(character_vector) # Will output "character" in the console window
my_list <- list(1.5, "apple", TRUE, c(1, 2, 3))  # Mixed elements
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)  # 3x3 matrix
my_array <- array(1:12, dim = c(3, 2, 2))  # 3D array
View(my_matrix)
my_data <- data.frame(
id = 1:3,
name = c("Alice", "Bob", "Charlie"),
score = c(85.5, 92.0, 88.5)
)
View(my_data)
str(my_data)
view(my_arary)
view(my_array)
fruits <- c("apple", "banana", "cherry", "date")
fruits[1]       # first element
fruits[2:4]     # elements 2 through 4
fruits[-1]      # all but the first element
nums <- c(5, 10, 15, 20)
nums[c(TRUE, FALSE, TRUE, FALSE)]  # selects 5 and 15
nums[nums > 10]                    # selects elements greater than 10
scores <- c(math = 90, english = 85, science = 92)
scores["math"]
scores[c("math", "science")]
student <- list(
name = "Alex",
age = 20,
scores = c(88, 92, 95)
)
student$name
student[["age"]]
student$scores[2]
df <- data.frame(
id = 1:4,
name = c("Alice", "Bob", "Carmen", "Diego"),
score = c(88, 92, 95, 90)
)
df[1, ]       # selects the first row (all columns)
df[, 2]       # selects the second column (all rows)
df[1:2, c(1, 3)]  # selects rows 1–2 and columns 1 and 3
df[-1, ]   # all rows except the first
df[, -2]   # all columns except the second
df$name       # returns the 'name' column as a vector
df$score      # returns the 'score' column as a vector
df[, "score"] # identical result
df[1:2, c("id", "score")]
df[, "score", drop = FALSE]
df$passed <- df$score >= 90
df
df$passed <- NULL
df
new_row <- data.frame(id = 5, name = "Eva", score = 93)
df <- rbind(df, new_row)
df <- df[-1, ]  # removes the first row
df
df[df$score > 90 & df$name != "Bob", c("name", "score")]
columns_to_keep <- c("id", "score")
df[, columns_to_keep]
mean(df[df$score > 90, "score"])
sum(df$score > 90)
data[data$rt > 400 & !is.na(data$rt), ]
data <- data.frame(
subject_id = 1:20,
rt = c(470, 360, 665, 400, 445, 270, 500, 565, 350, 445,
275, NA, 600, 290, 560, 375, 450, 480, 325, 430),
congruent = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE,
FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE,
TRUE, FALSE, TRUE, FALSE, TRUE, FALSE),
color = c("red", "blue", "blue", "green", "red", "red", "blue",
"green", "blue", "green", "red", "blue", "green", "blue",
"green", "red", "blue", "blue", "green", "red")
)
congruent_trials <- data[data$congruent == TRUE, ]
fast_trials <- data[data$rt < 500, ]
fast_congruent <- data[data$congruent == TRUE & data$rt < 500, ]
mean(data[data$congruent == TRUE, "rt"], na.rm = TRUE)
mean(data[data$congruent == FALSE, "rt"], na.rm = TRUE)
sum(is.na(data$rt))
mean(data[data$color == "blue", "rt"], na.rm = TRUE)
mean(data[data$color == "red", "rt"], na.rm = TRUE)
subset_cols <- data[, c("subject_id", "rt", "congruent")]
